import { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import Navbar from '../components/Navbar';
import Footer from '../components/Footer';
import { storage } from '../services/firebase';
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';
import { motion } from 'framer-motion';
import { Line } from 'react-chartjs-2';
import { 
  Chart as ChartJS, 
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  Title, 
  Tooltip, 
  Legend,
  ArcElement
} from 'chart.js';
import { Doughnut } from 'react-chartjs-2';

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Chart.js
ChartJS.register(
  CategoryScale, 
  LinearScale, 
  PointElement, 
  LineElement, 
  Title, 
  Tooltip, 
  Legend,
  ArcElement
);

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface UserProfile {
  displayName: string;
  photoURL: string;
  email: string;
  school: string;
  grade: string;
  age: number;
}

interface SubjectProgress {
  id: number;
  name: string;
  progress: number;
  color: string;
}

interface Achievement {
  id: number;
  title: string;
  description: string;
  icon: string;
  date: string;
}

interface Error {
  id: number;
  subject: string;
  topic: string;
  description: string;
  date: string;
}

interface Goal {
  id: number;
  subject: string;
  targetProgress: number;
  currentProgress: number;
  deadline: string;
}

const StudentProfile = () => {
  const { currentUser } = useAuth();
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [profile, setProfile] = useState<UserProfile | null>(null);
  const [subjects, setSubjects] = useState<SubjectProgress[]>([]);
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [errors, setErrors] = useState<Error[]>([]);
  const [goals, setGoals] = useState<Goal[]>([]);
  const [uploadingPhoto, setUploadingPhoto] = useState(false);
  const [photoFile, setPhotoFile] = useState<File | null>(null);

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ Firebase)
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∏ –±—ã –∑–∞–ø—Ä–æ—Å—ã –∫ Firestore
        
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        setProfile({
          displayName: '–¢–µ–º–∏—Ä–ª–∞–Ω –ê—Å–∫–∞—Ä–æ–≤',
          photoURL: 'https://i.pravatar.cc/300',
          email: 'temirlan@example.com',
          school: '–®–∫–æ–ª–∞ ‚Ññ25',
          grade: '10 –∫–ª–∞—Å—Å',
          age: 16
        });

        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º
        setSubjects([
          { id: 1, name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', progress: 75, color: 'from-blue-500 to-indigo-600' },
          { id: 2, name: '–ò—Å—Ç–æ—Ä–∏—è', progress: 68, color: 'from-green-500 to-emerald-600' },
          { id: 3, name: '–§–∏–∑–∏–∫–∞', progress: 81, color: 'from-red-500 to-rose-600' },
          { id: 4, name: '–ë–∏–æ–ª–æ–≥–∏—è', progress: 62, color: 'from-purple-500 to-violet-600' },
          { id: 5, name: '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', progress: 90, color: 'from-yellow-500 to-amber-600' },
        ]);

        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        setAchievements([
          { id: 1, title: '–≠–∫—Å–ø–µ—Ä—Ç –≤ –≥–µ–æ–º–µ—Ç—Ä–∏–∏', description: '–î–æ—Å—Ç–∏–≥ 90% –∑–Ω–∞–Ω–∏–π –≤ —Ç–µ–º–µ', icon: 'üèÜ', date: '2023-11-15' },
          { id: 2, title: '–°–æ–∫—Ä–∞—Ç–∏–ª –æ—à–∏–±–∫–∏', description: '–ú–µ–Ω—å—à–µ 5 –æ—à–∏–±–æ–∫ –≤ –º–µ—Å—è—Ü', icon: 'ü•á', date: '2023-12-05' },
          { id: 3, title: '–ü—Ä–æ–≥—Ä–µ—Å—Å-–º–∞—Ä–∞—Ñ–æ–Ω–µ—Ü', description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏', icon: 'üî•', date: '2024-01-10' },
          { id: 4, title: '–ú–∞—Å—Ç–µ—Ä —É—Ä–∞–≤–Ω–µ–Ω–∏–π', description: '–†–µ—à–∏–ª 100 —É—Ä–∞–≤–Ω–µ–Ω–∏–π –±–µ–∑ –æ—à–∏–±–æ–∫', icon: '‚ö°', date: '2024-02-20' }
        ]);

        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—à–∏–±–æ–∫
        setErrors([
          { id: 1, subject: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', topic: '–ò–Ω—Ç–µ–≥—Ä–∞–ª—ã', description: '–û—à–∏–±–∫–∞ –≤ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞', date: '2024-03-15' },
          { id: 2, subject: '–§–∏–∑–∏–∫–∞', topic: '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', description: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–∞ –û–º–∞', date: '2024-03-10' }
        ]);

        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ü–µ–ª–µ–π
        setGoals([
          { id: 1, subject: '–ê–ª–≥–µ–±—Ä–∞', targetProgress: 90, currentProgress: 75, deadline: '2024-05-01' },
          { id: 2, subject: '–ë–∏–æ–ª–æ–≥–∏—è', targetProgress: 80, currentProgress: 62, deadline: '2024-06-15' }
        ]);

      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [currentUser]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
  const handlePhotoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setPhotoFile(e.target.files[0]);
    }
  };

  const uploadPhoto = async () => {
    if (!photoFile || !currentUser) return;

    setUploadingPhoto(true);
    try {
      const storageRef = ref(storage, `profilePhotos/${currentUser.uid}`);
      await uploadBytes(storageRef, photoFile);
      const photoURL = await getDownloadURL(storageRef);
      
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      setProfile(prev => prev ? {...prev, photoURL} : null);
      
      setPhotoFile(null);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ:', error);
    } finally {
      setUploadingPhoto(false);
    }
  };

  // –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–æ—Å—Ç–∞ –∑–Ω–∞–Ω–∏–π
  const growthData = {
    labels: ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä—Ç', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω—å'],
    datasets: [
      {
        label: '–†–æ—Å—Ç –∑–Ω–∞–Ω–∏–π (%)',
        data: [50, 59, 65, 70, 73, 78],
        fill: false,
        backgroundColor: 'rgb(75, 192, 192)',
        borderColor: 'rgba(75, 192, 192, 0.8)',
        tension: 0.4
      },
    ],
  };
  
  // –û–ø—Ü–∏–∏ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top' as const,
      },
      title: {
        display: true,
        text: '–ò—Å—Ç–æ—Ä–∏—è —Ä–æ—Å—Ç–∞ –∑–Ω–∞–Ω–∏–π',
      },
    },
  };

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ "–û–±–∑–æ—Ä"
  const renderOverviewTab = () => (
    <div className="space-y-8">
      {/* Hero-—Å–µ–∫—Ü–∏—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ —Ç–µ–∫—É—â–µ–π —Ü–µ–ª—å—é */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="bg-gradient-to-r from-primary/20 to-primary/10 rounded-3xl p-8 shadow-sm"
      >
        <h2 className="text-2xl font-bold mb-2">
          –ü—Ä–∏–≤–µ—Ç, {profile?.displayName?.split(' ')[0] || '–£—á–µ–Ω–∏–∫'}! üöÄ –ì–æ—Ç–æ–≤ –ø–æ–∫–æ—Ä—è—Ç—å –Ω–æ–≤—ã–µ –≤–µ—Ä—à–∏–Ω—ã?
        </h2>
        <p className="text-lg">
          –¢–µ–∫—É—â–∞—è —Ü–µ–ª—å: –û—Å–≤–æ–∏—Ç—å –ê–ª–≥–µ–±—Ä—É –Ω–∞ {goals[0]?.targetProgress || 90}% 
          üéØ (—Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {goals[0]?.currentProgress || 75}%)
        </p>
      </motion.div>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –æ–±—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º */}
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.1 }}
        className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
      >
        <h3 className="text-xl font-semibold mb-4">–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="flex justify-center">
            <div className="w-48 h-48">
              <Doughnut 
                data={{
                  labels: ['–ò–∑—É—á–µ–Ω–æ', '–û—Å—Ç–∞–ª–æ—Å—å'],
                  datasets: [{
                    data: [75, 25],
                    backgroundColor: [
                      'rgba(75, 192, 192, 0.8)',
                      'rgba(200, 200, 200, 0.5)',
                    ]
                  }]
                }} 
              />
            </div>
          </div>
          
          <div className="md:col-span-2 grid grid-cols-2 sm:grid-cols-3 gap-4">
            {subjects.map((subject) => (
              <motion.div
                key={subject.id}
                whileHover={{ y: -5 }}
                className="bg-white dark:bg-[#252525] rounded-xl shadow-sm p-4 hover:shadow-md transition-all"
              >
                <h4 className="font-medium mb-2">{subject.name}</h4>
                <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                  <div
                    className={`h-2.5 rounded-full bg-gradient-to-r ${subject.color}`}
                    style={{ width: `${subject.progress}%` }}
                  ></div>
                </div>
                <p className="text-right mt-1 text-sm font-medium">{subject.progress}%</p>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.div>

      {/* –ò—Å—Ç–æ—Ä–∏—è —Ä–æ—Å—Ç–∞ (–≥—Ä–∞—Ñ–∏–∫) */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
      >
        <h3 className="text-xl font-semibold mb-4">–ò—Å—Ç–æ—Ä–∏—è —Ä–æ—Å—Ç–∞</h3>
        <div className="h-80">
          <Line options={options} data={growthData} />
        </div>
      </motion.div>

      {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.3 }}
        className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
      >
        <h3 className="text-xl font-semibold mb-4">–°–ª–∞–±—ã–µ –∑–æ–Ω—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
        
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –°–ª–∞–±—ã–µ –∑–æ–Ω—ã */}
          <div className="bg-red-50 dark:bg-red-900/20 rounded-2xl p-4">
            <h4 className="font-semibold flex items-center text-red-600 dark:text-red-400 mb-3">
              <span className="mr-2">üî¥</span> –°–ª–∞–±—ã–µ –∑–æ–Ω—ã
            </h4>
            
            {errors.length > 0 ? (
              <ul className="space-y-2">
                {errors.map(error => (
                  <li key={error.id} className="bg-white dark:bg-[#252525] rounded-xl p-3 shadow-sm">
                    <p className="font-medium">{error.subject}: {error.topic}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-400">{error.description}</p>
                    <p className="text-xs text-gray-500 mt-1">{error.date}</p>
                  </li>
                ))}
              </ul>
            ) : (
              <p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–∞–±—ã—Ö –∑–æ–Ω. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!</p>
            )}
          </div>
          
          {/* AI-–°–æ–≤–µ—Ç—ã */}
          <div className="bg-blue-50 dark:bg-blue-900/20 rounded-2xl p-4">
            <h4 className="font-semibold flex items-center text-blue-600 dark:text-blue-400 mb-3">
              <span className="mr-2">üí°</span> AI-–°–æ–≤–µ—Ç—ã
            </h4>
            
            <div className="bg-white dark:bg-[#252525] rounded-xl p-4 shadow-sm">
              <p className="font-medium">–†–∞–±–æ—Ç–∞ –Ω–∞–¥ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞–º–∏</p>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                –†–µ—à–∞–π –ø–æ 3 –∑–∞–¥–∞—á–∏ –≤ –¥–µ–Ω—å –ø–æ –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞–º ‚Äî —ç—Ç–æ –ø–æ–≤—ã—Å–∏—Ç —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞ +10% –∑–∞ –Ω–µ–¥–µ–ª—é.
              </p>
              <button className="mt-2 text-sm text-primary font-medium">–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å ‚Üí</button>
            </div>
          </div>
        </div>
      </motion.div>
      
      {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
      >
        <h3 className="text-xl font-semibold mb-4">–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h3>
        
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
          {achievements.map(achievement => (
            <motion.div
              key={achievement.id}
              whileHover={{ scale: 1.03 }}
              className="bg-gradient-to-br from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/10 rounded-2xl p-4 text-center shadow-sm"
            >
              <div className="text-3xl mb-2">{achievement.icon}</div>
              <h4 className="font-medium text-amber-800 dark:text-amber-400">{achievement.title}</h4>
              <p className="text-xs text-gray-600 dark:text-gray-400 mt-1">{achievement.description}</p>
              <p className="text-xs text-gray-500 mt-2">{achievement.date}</p>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </div>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ "–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
  const renderPersonalTab = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
    >
      <h3 className="text-xl font-semibold mb-6">–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {/* –§–æ—Ç–æ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ */}
        <div className="flex flex-col items-center">
          <div className="w-40 h-40 rounded-full overflow-hidden bg-gray-200 mb-4">
            {profile?.photoURL ? (
              <img 
                src={profile.photoURL} 
                alt="–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è" 
                className="w-full h-full object-cover"
              />
            ) : (
              <div className="w-full h-full flex items-center justify-center text-gray-400">
                <svg className="w-20 h-20" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clipRule="evenodd"></path>
                </svg>
              </div>
            )}
          </div>
          
          <div className="mt-2">
            <label className="btn btn-sm btn-outline">
              –í—ã–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ
              <input 
                type="file" 
                className="hidden" 
                accept="image/*" 
                onChange={handlePhotoChange}
              />
            </label>
            
            {photoFile && (
              <button 
                className="btn btn-sm btn-primary ml-2"
                onClick={uploadPhoto}
                disabled={uploadingPhoto}
              >
                {uploadingPhoto ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å'}
              </button>
            )}
          </div>
        </div>
        
        {/* –§–æ—Ä–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ */}
        <div>
          <form className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –ü–æ–ª–Ω–æ–µ –∏–º—è
              </label>
              <input 
                type="text" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
                defaultValue={profile?.displayName}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Email
              </label>
              <input 
                type="email" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
                defaultValue={profile?.email}
                disabled
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –®–∫–æ–ª–∞
              </label>
              <input 
                type="text" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
                defaultValue={profile?.school}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –ö–ª–∞—Å—Å
              </label>
              <input 
                type="text" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
                defaultValue={profile?.grade}
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –í–æ–∑—Ä–∞—Å—Ç
              </label>
              <input 
                type="number" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
                defaultValue={profile?.age}
              />
            </div>
            
            <div className="pt-2">
              <button type="button" className="btn btn-primary">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </button>
            </div>
          </form>
        </div>
      </div>
    </motion.div>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ "–¶–µ–ª–∏"
  const renderGoalsTab = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="space-y-6"
    >
      <div className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-xl font-semibold">–ú–æ–∏ —Ü–µ–ª–∏</h3>
          <button className="btn btn-primary btn-sm">
            <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
            </svg>
            –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å
          </button>
        </div>
        
        {goals.length > 0 ? (
          <div className="space-y-4">
            {goals.map(goal => (
              <div 
                key={goal.id}
                className="bg-gradient-to-r from-gray-50 to-white dark:from-gray-800/30 dark:to-[#252525] rounded-2xl p-5 shadow-sm"
              >
                <div className="flex justify-between items-center mb-2">
                  <h4 className="font-medium text-lg">{goal.subject}</h4>
                  <span className="text-sm text-gray-600 dark:text-gray-400">
                    –î–µ–¥–ª–∞–π–Ω: {goal.deadline}
                  </span>
                </div>
                
                <div className="mb-2">
                  <div className="flex justify-between text-sm mb-1">
                    <span>–ü—Ä–æ–≥—Ä–µ—Å—Å: {goal.currentProgress}%</span>
                    <span>–¶–µ–ª—å: {goal.targetProgress}%</span>
                  </div>
                  
                  <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                    <div
                      className="h-2.5 rounded-full bg-gradient-to-r from-blue-500 to-indigo-600"
                      style={{ width: `${(goal.currentProgress / goal.targetProgress) * 100}%` }}
                    ></div>
                  </div>
                </div>
                
                <div className="flex justify-between items-center mt-4">
                  <span className={`px-3 py-1 rounded-full text-xs font-medium ${
                    (goal.currentProgress / goal.targetProgress) >= 0.9 
                      ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400' 
                      : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400'
                  }`}>
                    {(goal.currentProgress / goal.targetProgress) >= 0.9 
                      ? '–ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞' 
                      : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                  </span>
                  
                  <div>
                    <button className="btn btn-ghost btn-sm">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z" />
                      </svg>
                    </button>
                    <button className="btn btn-ghost btn-sm text-red-500">
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-10">
            <p className="text-gray-500 dark:text-gray-400 mb-4">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ü–µ–ª–µ–π –æ–±—É—á–µ–Ω–∏—è</p>
            <button className="btn btn-primary">–°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ü–µ–ª—å</button>
          </div>
        )}
      </div>
    </motion.div>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤–∫–ª–∞–¥–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
  const renderSettingsTab = () => (
    <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="bg-white dark:bg-[#1e1e1e] rounded-3xl shadow-sm p-6"
    >
      <h3 className="text-xl font-semibold mb-6">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h3>
      
      <div className="space-y-6">
        {/* –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è */}
        <div className="border-b border-gray-200 dark:border-gray-700 pb-6">
          <h4 className="font-medium text-lg mb-4">–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å</h4>
          <form className="space-y-4 max-w-md">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
              </label>
              <input 
                type="password" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input 
                type="password" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
              </label>
              <input 
                type="password" 
                className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50"
              />
            </div>
            
            <div>
              <button type="button" className="btn btn-primary">
                –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
              </button>
            </div>
          </form>
        </div>
        
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞ */}
        <div className="border-b border-gray-200 dark:border-gray-700 pb-6">
          <h4 className="font-medium text-lg mb-4">–Ø–∑—ã–∫</h4>
          <div className="max-w-xs">
            <select className="w-full px-4 py-2 border rounded-lg focus:ring-2 focus:ring-primary/50">
              <option value="ru">–†—É—Å—Å–∫–∏–π</option>
              <option value="kk">“ö–∞–∑–∞“õ—à–∞</option>
              <option value="en">English</option>
            </select>
          </div>
        </div>
        
        {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
        <div>
          <h4 className="font-medium text-lg mb-4">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
          <div className="space-y-3">
            <div className="flex items-center">
              <input 
                type="checkbox" 
                id="email_notif" 
                className="rounded text-primary focus:ring-primary/50 h-5 w-5"
                defaultChecked
              />
              <label htmlFor="email_notif" className="ml-2 text-gray-700 dark:text-gray-300">
                –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email
              </label>
            </div>
            
            <div className="flex items-center">
              <input 
                type="checkbox" 
                id="progress_notif" 
                className="rounded text-primary focus:ring-primary/50 h-5 w-5"
                defaultChecked
              />
              <label htmlFor="progress_notif" className="ml-2 text-gray-700 dark:text-gray-300">
                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
              </label>
            </div>
            
            <div className="flex items-center">
              <input 
                type="checkbox" 
                id="achievement_notif" 
                className="rounded text-primary focus:ring-primary/50 h-5 w-5"
                defaultChecked
              />
              <label htmlFor="achievement_notif" className="ml-2 text-gray-700 dark:text-gray-300">
                –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö
              </label>
            </div>
            
            <div className="flex items-center">
              <input 
                type="checkbox" 
                id="recommendation_notif" 
                className="rounded text-primary focus:ring-primary/50 h-5 w-5"
                defaultChecked
              />
              <label htmlFor="recommendation_notif" className="ml-2 text-gray-700 dark:text-gray-300">
                –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç AI
              </label>
            </div>
          </div>
        </div>
      </div>
    </motion.div>
  );

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-[#121212]">
        <Navbar />
        <main className="flex-grow flex items-center justify-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-primary"></div>
        </main>
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col bg-gray-50 dark:bg-[#121212]">
      <Navbar />

      <main className="flex-grow py-6 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="mb-8">
            <h1 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white">
              –ü—Ä–æ—Ñ–∏–ª—å
            </h1>
            <p className="mt-2 text-gray-600 dark:text-gray-400">
              –í–∞—à–∏ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </p>
          </div>

          {/* –í–∫–ª–∞–¥–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è */}
          <div className="mb-6 border-b border-gray-200 dark:border-gray-700">
            <nav className="-mb-px flex space-x-8 overflow-x-auto">
              <button
                onClick={() => setActiveTab('overview')}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'overview'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:hover:text-gray-300'
                }`}
              >
                –û–±–∑–æ—Ä
              </button>
              <button
                onClick={() => setActiveTab('personal')}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'personal'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:hover:text-gray-300'
                }`}
              >
                –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              </button>
              <button
                onClick={() => setActiveTab('goals')}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'goals'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:hover:text-gray-300'
                }`}
              >
                –¶–µ–ª–∏
              </button>
              <button
                onClick={() => setActiveTab('settings')}
                className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === 'settings'
                    ? 'border-primary text-primary'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:hover:text-gray-300'
                }`}
              >
                –ù–∞—Å—Ç—Ä–æ–π–∫–∏
              </button>
            </nav>
          </div>

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ */}
          <div className="mt-6">
            {activeTab === 'overview' && renderOverviewTab()}
            {activeTab === 'personal' && renderPersonalTab()}
            {activeTab === 'goals' && renderGoalsTab()}
            {activeTab === 'settings' && renderSettingsTab()}
          </div>
        </div>
      </main>

      <Footer />
    </div>
  );
};

export default StudentProfile; 